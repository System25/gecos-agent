#!/usr/bin/python
# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-
__author__ = "David Amian Valle <damian@emergya.com>"
__copyright__ = "Copyright (C) 2014, Junta de Andaluc√≠a <gecos@guadalinex.org>"
__license__ = "GPL-2"

import os
import sys
import requests
import json
import subprocess
import time
import random
import re
import shutil

if __name__ == '__main__':
    fp = open('/tmp/gecos-chef-client-wrapper.log', "w")
    args = sys.argv
    args.pop(0)
    try:
        gcc_flag = open ('/etc/gcc.control')
    except Exception as e:
        fp.write("This workstation is not linked to a Control Center")
        fp.close()
        sys.exit(1)
    # Random delay to avoid server congestion, between 0s and 10 minutes (600s)
    # it's applied only if gecos-chef-client-wrapper is run from cron
    # TODO: Move the maximum delay to a configuration file
    max_delay = 600
    lapse = 0
    my_pid = os.getpid()
    search_string = "-cron-"
    parents_chain = subprocess.check_output(["/usr/bin/pstree", "-s",str(my_pid)])
    from_cron = re.search(search_string, parents_chain)
    if from_cron:
        lapse = random.randint(0, max_delay)
        fp.write("Client delayed "+str(lapse)+" seconds to avoid congestion.\n")
    time.sleep(lapse)      
        
    content = gcc_flag.read()
    gcc_flag.close()
    gcc_flag_json = json.loads(content)
    url = gcc_flag_json['uri_gcc']
    node_id = gcc_flag_json['gcc_nodename']

# GECOS Agent and Chef Client Autoupdate
    new_version_available=subprocess.check_output(["aptitude","search","?and(?upgradable,?exact-name(gecos-agent))"])
    if new_version_available:
        fp.write("New GECOS Agent version available. Upgrading.\n")
        subprocess.call(["apt","install","gecos-agent"]) 
    
    new_version_available=subprocess.check_output(["aptitude","search","?and(?upgradable,?exact-name(chef))"])
    if new_version_available:
        fp.write("New Chef Client version available. Upgrading before client execution.\n")
        subprocess.call(["apt","install","chef"]) 

# GEMs installation
    fp.write("Checking installed gems\n")
    # Required gems
    required_gems = ['json', 'rest-client', 'activesupport', 'netaddr']
    # Defaults
    gembin = "/usr/bin/gem"
    gemfile = "/etc/gemrc"

    if os.path.isfile("/opt/chef/embedded/bin/gem") and not os.path.isfile("/opt/chef/embedded/etc/gemrc"):
        # Embedded
        gembin = "/opt/chef/embedded/bin/gem"
        gemfile = "/opt/chef/embedded/etc/gemrc"

        try:
            os.mkdir("/opt/chef/embedded/etc/", 0755)
            shutil.copyfile("/etc/gemrc", gemfile)
        except OSError:
            pass # Already directory exists
        except IOError:
            pass # Not /etc/gemrc

    installed_gems = subprocess.check_output([
            gembin, "list", "--no-versions", "--config-file", gemfile]).split('\n')

    for gem_name in required_gems:
        # Checking if gem installed
        if gem_name in installed_gems:
            continue

        # Installing gem
        retval = subprocess.call([
            gembin, "install", gem_name, "--config-file", gemfile])

        if retval: # retval != 0
            fp.write("Error installing gem: %s\n" % gem_name)
        else:
            fp.write("gem installed: %s\n" % gem_name)

    fp.write("Connecting to GECOS Control Center api\n")
    try:
        res = requests.put(url+'/chef-client/run/', data={"node_id":node_id, "gcc_username":gcc_flag_json['gcc_username']},verify=False)
    except Exception as e:
        fp.write("Error connecting with GECOS Control Center\n")
        fp.write(str(e))
        fp.close()
        sys.exit(1)
    if res.ok and res.json()['ok']:
        cmd = ['/usr/bin/chef-client']
        cmd = cmd + args
        process = subprocess.Popen(cmd)
        process.wait()
        fp.write(str(process.returncode) + '\n')
        if process.returncode != 0:
            fp.write("Send chef-client error to GECOS Control Center\n")
            fp.close()
            sys.exit(1)
        else:
            fp.write("OK\n")
            fp.close()
            sys.exit(0)
    else:
        fp.write("Error talking with GECOS Control Center\n")
        fp.close()
        sys.exit(1)
