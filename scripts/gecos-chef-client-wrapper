#!/usr/bin/python
# -*- Mode: Python; coding: utf-8; indent-tabs-mode: nil; tab-width: 4 -*-
__author__ = "David Amian Valle <damian@emergya.com>"
__copyright__ = "Copyright (C) 2014, Junta de Andaluc√≠a <gecos@guadalinex.org>"
__license__ = "GPL-2"

import os
import sys
import requests
import json
import subprocess
import time
import random
import re
import datetime

# Logs data files other than Chef client logs
OTHER_LOGS_DATA_FILES = ['/var/log/automatic-updates.log', '/var/log/automatic-updates.err']



if __name__ == '__main__':
    os.environ["HOME"] = "/root"
    fp = open('/tmp/gecos-chef-client-wrapper.log', "w")
    args = sys.argv
    args.pop(0)
    try:
        gcc_flag = open ('/etc/gcc.control')
    except Exception as e:
        fp.write("This workstation is not linked to a Control Center")
        fp.close()
        sys.exit(1)
    # Random delay to avoid server congestion, between 0s and 10 minutes (600s)
    # it's applied only if gecos-chef-client-wrapper is run from cron
    # TODO: Move the maximum delay to a configuration file
    max_delay = 600
    lapse = 0
    my_pid = os.getpid()
    search_string = "-cron-"
    parents_chain = subprocess.check_output(["/usr/bin/pstree", "-s",str(my_pid)])
    from_cron = re.search(search_string, parents_chain)
    if from_cron:
        lapse = random.randint(0, max_delay)
        fp.write("Client delayed "+str(lapse)+" seconds to avoid congestion.\n")
        args.pop(0)
    time.sleep(lapse)      
        
    content = gcc_flag.read()
    gcc_flag.close()
    gcc_flag_json = json.loads(content)
    url = gcc_flag_json['uri_gcc']
    node_id = gcc_flag_json['gcc_nodename']

    new_version=$(aptitude search '?and(?upgradable,?exact-name(chef))')
    if [ -n "$new_version" ]; then 
        fp.write("New Chef-Client version available. Upgrading before client execution.\n"; 
        apt install chef 
    fi

    fp.write("Connecting to GECOS Control Center api\n")
    try:
        # Reserve Chef node
        res = requests.put(url+'/chef-client/run/', data={"node_id":node_id, "gcc_username":gcc_flag_json['gcc_username']},verify=False)
    except Exception as e:
        fp.write("Error connecting with GECOS Control Center\n")
        fp.write(str(e))
        fp.close()
        sys.exit(1)
    if res.ok and res.json()['ok']:
        # Run Chef client
        cmd = ['/usr/bin/chef-client']
        cmd = cmd + args
        returnval = 0
        try:
            process = subprocess.Popen(cmd, stdout=subprocess.PIPE, stderr=subprocess.STDOUT)

            # Getting child process ouput to screen and into variable
            chef_client_output = ''
            while True:
                line = process.stdout.readline()
                chef_client_output += line
                if not line and process.poll() is not None:
                    break
                if line:
                    print line

            childstatus = process.poll()

            if childstatus != 0:
                fp.write('Returned code: %d\n' % (childstatus))
                fp.write("Send chef-client error to GECOS Control Center\n")
                returnval = 1
            else:
                fp.write('Returned code: 0\n')
                fp.write("OK\n")

        except OSError as e:
            fp.write("failed to execute chef-client: %s" % (str(e)))
            fp.write("Send chef-client error to GECOS Control Center\n")
            returnval = 1

        # Check if this computer is in debug mode
        debug_mode_json = {}
        if os.path.isfile('/etc/gecos/debug_mode') and os.access('/etc/gecos/debug_mode', os.R_OK):
            with open('/etc/gecos/debug_mode', 'r') as debug_mode_file:
                debug_mode_content = debug_mode_file.read()
                debug_mode_json = json.loads(debug_mode_content)
            
        if 'debug_mode' in debug_mode_json and debug_mode_json['debug_mode']:
            # Send logs data to GECOS Control Center
            logs_data = {}
            logs_data['date'] = datetime.datetime.now().isoformat()
            logs_data['files'] = {}
            logs_data['files']['chef-client.log'] = chef_client_output
            
            # Read other logs data files
            for f in OTHER_LOGS_DATA_FILES:
                if os.path.isfile(f) and os.access(f, os.R_OK):
                    with open(f, 'r') as logfile:
                        data=logfile.read()
                        logs_data['files'][os.path.basename(f)] = data
                    
                else:
                    fp.write("Can't read file: %s\n" % (f))
            
            # Send data
            try:
                # Send logs data
                res = requests.post(url+'/chef-client/run/', data={"node_id":node_id, "gcc_username":gcc_flag_json['gcc_username'], "logs": json.dumps(logs_data)}, verify=False)
            except Exception as e:
                fp.write("Error connecting with GECOS Control Center\n")
                fp.write(str(e))
                fp.close()
                sys.exit(1)
            if res.ok and res.json()['ok']:  
                fp.write("Logs data successfully sent to GECOS Control Center\n")
            elif res.ok:
                fp.write("Error sending log data to GECOS Control Center: %s\n"%(res.json()['message']))
            else:
                fp.write("Error sending log data to GECOS Control Center\n")
            
        fp.close()

# Restarting agent if flag file (created in a chef recipe) exists
        if if os.path.isfile("/tmp/gecos-agent-restart.tmp"):
            os.exec(__file__)    
        else:
            sys.exit(returnval)
    else:
        fp.write("Error talking with GECOS Control Center\n")
        fp.close()
        sys.exit(1)

